service:
  name: aws-capstone

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  # - serverless-plugin-offline-dynamodb-stream
  - serverless-offline # serverless offline start
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NOTES_TABLE: notes-${self:provider.stage}-v1
    NOTES_BUCKET: notes-images-${self:provider.stage}-v1

stage: dev
region: us-east-1

# package:
#   exclude:
#     - node_modules/**/*
  # include:
  #   handler.ts

functions:
  auth:
    handler: src/lambda/auth/authorizer.handler
    environment:
      AUTH_JWKS: "https://vku713.auth0.com/.well-known/jwks.json"
      AUTH_CLIENT_ID: "j9orHymagS29sn65A5j2xZs8JySS4upc"
      AUTH_ISSUER: "https://vku713.auth0.com/"

  getNotes:
    handler: src/lambda/http/notesByUser.handler
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
  getNoteById:
    handler: src/lambda/http/noteById.handler
    events:
      - http:
          path: notes/{noteId}
          method: get
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}


    # environment:
    #   variable1: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    NotesDynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
          - AttributeName: userId # partition key
            AttributeType: S
          - AttributeName: noteId # sort key
            AttributeType: S
          KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.NOTES_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.NOTES_BUCKET}
        CorsConfiguration:
          CorsRules:
          -
            AllowedOrigins:
            - '*'
            AllowedHeaders:
            - '*'
            AllowedMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - HEAD
            MaxAge: 3000
    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket:
    #       Ref: AttachmentsBucket
    #     PolicyDocument:
    #       Id: NotesBucketPolicy
    #       Version: "2012-10-17"
    #       Statement:
    #         - Sid: PublicReadForGetBucketObjects
    #           Effect: Allow
    #           Principal: '*'
    #           Action: 's3:GetObject'
    #           Resource: 'arn:aws:s3:::${self:provider.environment.NOTES_BUCKET}/*'

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
      noStart: false
    seed:
      demo:
        sources:
          - table: ${self:provider.environment.NOTES_TABLE}
            sources: [./seed/notes.json]

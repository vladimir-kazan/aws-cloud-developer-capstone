service:
  name: vku713-capstone

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  # - serverless-plugin-offline-dynamodb-stream
  - serverless-offline # serverless offline start
  - serverless-iam-roles-per-function
  - serverless-finch
  # https://github.com/fernando-mc/serverless-finch#readme

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NOTES_TABLE: notes-${self:provider.stage}-v1
    NOTES_IDX_TITLE: notes-idx-title-${self:provider.stage}-v1
    NOTES_IDX_UPDATED: notes-idx-updated-${self:provider.stage}-v1
    NOTES_HOSTING_BUCKET: notes-markdown-hosting-${self:provider.stage}-v1
    ELASTIC_URL:
      Fn::GetAtt: [ElasticSearchInstance, DomainEndpoint]

# package:
#   exclude:
#     - node_modules/**/*
# include:
#   handler.ts

functions:
  auth:
    handler: src/lambda/auth/authorizer.handler
    environment:
      AUTH_JWKS: 'https://vku713.auth0.com/.well-known/jwks.json'
      AUTH_CLIENT_ID: 'j9orHymagS29sn65A5j2xZs8JySS4upc'
      AUTH_ISSUER: 'https://vku713.auth0.com/'

  getNotes:
    handler: src/lambda/http/notesByUser.handler
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: auth
          request:
            parameters:
              querystrings:
                sort: false
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/*
  getNoteById:
    handler: src/lambda/http/noteById.handler
    events:
      - http:
          path: notes/{noteId}
          method: get
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
  addNote:
    handler: src/lambda/http/addNote.handler
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: auth
          request:
            schema:
              application/json: ${file(models/create-note-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
  updateNote:
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          path: notes
          method: put
          cors: true
          authorizer: auth
          request:
            schema:
              application/json: ${file(models/update-note-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
  deleteNoteById:
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          path: notes/{noteId}
          method: delete
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  searchNotes:
    environment:
      ES_ENDPOINT: !GetAtt ElasticSearchInstance.DomainEndpoint
    handler: src/lambda/http/searchNotes.handler
    events:
      - http:
          path: search/{expression}
          method: get
          cors: true
          authorizer: auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - es:ESHttpDelete
          - es:ESHttpGet
          - es:ESHttpHead
          - es:ESHttpPost
          - es:ESHttpPut
        Resource:
          Fn::GetAtt: [ElasticSearchInstance, DomainArn]

  eleasticSearchSync:
    environment:
      ES_ENDPOINT: !GetAtt ElasticSearchInstance.DomainEndpoint
    handler: src/lambda/dynamoDb/elastic-search-sync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt NotesDynamoDBTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - es:ESHttpDelete
          - es:ESHttpGet
          - es:ESHttpHead
          - es:ESHttpPost
          - es:ESHttpPut
        Resource:
          Fn::GetAtt: [ElasticSearchInstance, DomainArn]

# you can add CloudFormation resource templates here
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
          # or alternative
          # gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          # gatewayresponse.header.Access-Control-Allow-Methods:  "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    NotesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId # partition key
            AttributeType: S
          - AttributeName: noteId # sort key
            AttributeType: S
          - AttributeName: title # sort key
            AttributeType: S
          - AttributeName: updatedAt # sort key
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.NOTES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.NOTES_IDX_TITLE}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: title
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
          - IndexName: ${self:provider.environment.NOTES_IDX_UPDATED}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    ElasticSearchInstance:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: 7.4
        DomainName: vku713-notes-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeType: gp2
          VolumeSize: 10
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'

    # S3HostingBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.NOTES_HOSTING_BUCKET}
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - POST
    #             - PUT
    #             - DELETE
    #             - HEAD
    #             - OPTIONS
    #           MaxAge: 3000
    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket:
    #       Ref: S3HostingBucket
    #     PolicyDocument:
    #       Id: NotesBucketPolicy
    #       Version: '2012-10-17'
    #       Statement:
    #         - Sid: PublicReadForGetBucketObjects
    #           Effect: Allow
    #           Principal: '*'
    #           Action: 's3:GetObject'
    #           Resource: 'arn:aws:s3:::${self:provider.environment.NOTES_HOSTING_BUCKET}/*'

custom:
  client:
    bucketName: ${self:provider.environment.NOTES_HOSTING_BUCKET}
    distributionFolder: ../frontend/build
    indexDocument: index.html
    errorDocument: index.html
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
      noStart: false
    seed:
      demo:
        sources:
          - table: ${self:provider.environment.NOTES_TABLE}
            sources: [./seed/notes.json]
